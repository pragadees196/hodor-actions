name: cicd
on:
  push:
    branches:
      - master
    paths-ignore:
      - k8s/*.yaml
  workflow_dispatch:
jobs:
  Fetaching-the-code:
    runs-on: ubuntu-latest
    steps:
      - name: code fetch 
        uses: actions/checkout@v3
  Static-code-analysis:
    runs-on: ubuntu-latest
    needs: Fetaching-the-code
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: sonarqube scanning
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: check Quality Gate result
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  Git-leaks:
    runs-on: ubuntu-latest
    needs: Static-code-analysis
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Docker:
    runs-on: ubuntu-latest
    needs: Git-leaks
    outputs:
      FULL_TAG_OUTPUT: "${{steps.imagetag.outputs.FULL_TAG_OUTPUT}}"
    env: 
      DOCKERHUB_USERNAME: pragadeesh196
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set IMAGE_NAME and FULL_TAG dynamically
        id: imagetag
        run: |
          echo "IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "FULL_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "FULL_TAG_OUTPUT=pragadeesh196/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: false
          tags: app:latest
      - name: compressing the image
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: app:latest
          tag: "slim"
      - name: Tagging the image
        run: |
          docker tag app:slim $FULL_TAG
          docker rmi app:latest
      - name: printing image
        run: docker images
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.FULL_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Push Docker image to Docker Hub
        run: |
          docker push $FULL_TAG
      - name: printing the tag
        run:  |
          echo "${{needs.imagetag.outputs.FULL_TAG_OUTPUT}}"
  Updating-Kubernetes-deployment:
    runs-on: ubuntu-latest
    needs: Docker
    if: github.ref == 'refs/heads/master'
    env:
      IMAGE_TAG: "${{ needs.Docker.outputs.FULL_TAG_OUTPUT }}"
    steps:
      - name: Fetch code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Print image tag
        run: |
          echo "IMAGE_TAG is: ${IMAGE_TAG}"
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Update Kubernetes deployment file
        run: |
          sed -i "s|image: .*|image: ${IMAGE_TAG}|" k8s/deployment.yaml
          echo "Updated deployment to use image: ${IMAGE_TAG}"
          grep -A 1 "image:" k8s/deployment.yaml
      - name: Commit and push changes
        run: |
          git add k8s/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ env.IMAGE_TAG }} [skip ci]" || echo "No changes to commit"
          git push
          
        

