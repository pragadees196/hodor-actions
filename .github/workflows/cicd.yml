name: cicd
on:
  # push:
  #   branches:
  #     - master
  #   paths-ignore:
  #     - k8s/*.yaml
  workflow_dispatch:
jobs:
  Fetaching-the-code:
    runs-on: ubuntu-latest
    steps:
      - name: code fetch 
        uses: actions/checkout@v3
  Static-code-analysis:
    runs-on: ubuntu-latest
    needs: Fetaching-the-code
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: sonarqube scanning
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: check Quality Gate result
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  Git-leaks:
    runs-on: ubuntu-latest
    needs: Static-code-analysis
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Docker:
    runs-on: ubuntu-latest
    needs: Git-leaks
    env: 
      DOCKERHUB_USERNAME: pragadees196
    steps:
      - name: fetch code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set IMAGE_NAME and FULL_TAG dynamically
        run: |
          echo "IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "FULL_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_ENV
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: false
          tags: app:latest
      - name: compressing the image
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: app:latest
          tag: "slim"
      - name: Tagging the image
        run: |
          docker tag app:slim $FULL_TAG
          docker rmi app:latest
      - name: printing image
        run: docker images